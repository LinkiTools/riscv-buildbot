# -*- python -*-
# ex: set syntax=python:

import os
import sys
import re
from json import load
from buildbot.plugins import worker, schedulers, util, secrets, reporters, steps
from buildbot.process import factory
from buildbot.steps.shell import Compile
from buildbot.steps.shell import Configure
from buildbot.steps.shell import ShellCommand
from buildbot.steps.source.git import Git
from buildbot.changes.gitpoller import GitPoller
from buildbot.process.results import SUCCESS, FAILURE, EXCEPTION

# ---
# GCC BuildBot Configuration
# ---

# This is the dictionary that the buildmaster pays attention to. We
# also use a shorter alias to save typing.
c = BuildmasterConfig = {}

#### Title and URLs

c['title'] = "RISC-V"
c['titleURL'] = "https://riscv.org/software-tools/"
c['buildbotURL'] = "https://riscv-buildbot.linki.tools/"

RISCV_MAIL_FROM = 'pmatos+riscv-buildbot@linki.tools'
RISCV_MAIL_TO = 'riscv-buildbot+botmail@linki.tools'

# 'protocols' contains information about protocols which master will use for
# communicating with workers.
c['protocols'] = {'pb': {'port': 10989}}

# One build request per builder by default
c['collapseRequests'] = False

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

################
#### Secrets
################
if 'SECRETS_DIR' not in os.environ:
    print('SECRETS_DIR environment variable not defined')
    sys.exit(1)
elif not os.path.exists(os.environ['SECRETS_DIR']):
    print('SECRETS_DIR set to {} --- path does not exist')
    sys.exit(1)
c['secretsProviders'] = [secrets.SecretInAFile(dirname=os.environ['SECRETS_DIR'])]

TOOLS_RISCV_REPO = 'https://github.com/riscv/riscv-tools.git'
GCC_RISCV_REPO = 'https://github.com/riscv/riscv-gcc.git'
GLIBC_RISCV_REPO = 'https://github.com/riscv/riscv-glibc.git'
QEMU_RISCV_REPO = 'https://github.com/riscv/riscv-qemu.git'
GDB_RISCV_REPO = 'https://github.com/riscv/riscv-gdb.git'
DEJAGNU_RISCV_REPO = 'https://github.com/riscv/riscv-dejagnu.git'

# Revision links to gcc svn browser
# TODO revlink for riscv gcc?
#c['revlink'] = util.RevlinkMatch([r'{}.*'.format(BASE_REPO)],
#                                  r'https://gcc.gnu.org/viewcvs/gcc?view=revision&revision=%s')

c['change_source'] = []
c['change_source'].append(GitPoller(
    repourl=GCC_RISCV_REPO,
    branches=True,
    pollAtLaunch=True,
    pollInterval=300,
    project='riscv-gcc'))

# Catch things like PR gcc/42, PR16, PR 16 or bug #11,
# and turn them into gcc bugzilla URLs.
#cc_re_tuple = (r'(PR [a-z]+/|PR ?|#)(\d+)',
#	           r'https://gcc.gnu.org/bugzilla/show_bug.cgi?id=\2')

c['www'] = {
    'port': 5010,
    'plugins': {
        'console_view': True,
        'waterfall_view': True,
        'grid_view': True
    }
}


################
#### Services
################
c['services'] = []


#####################
#### Build steps ####
#####################

## This is where we define our build steps.  A build step is some
## command/action that buildbot will perform while building GCC.  See
## the documentation on each build step class to understand what it
## does.

class CloneOrUpdateToolsRepo (Git):
    """This build step updates the Tools repository."""
    name = "update tools repo"
    description = r"fetching tools trunk sources"
    descriptionDone = r"fetched tools trunk sources"
    def __init__ (self, workdir):
        Git.__init__ (self,
                      repourl = TOOLS_RISCV_REPO,
                      branch='master',
                      submodules=True,
                      progress=True,
                      workdir = workdir,
                      mode = 'incremental',
                      getDescription=True,
                      retry = (60, 10))
        self.haltOnFailure = True

class CloneOrUpdateGCCRepo (Git):
    """This build step updates the GCC repository."""
    name = "update gcc trunk repo"
    description = r"fetching GCC trunk sources"
    descriptionDone = r"fetched GCC trunk sources"
    def __init__ (self, workdir):
        Git.__init__ (self,
                      repourl = GCC_RISCV_REPO,
                      workdir = workdir,
                      progress=True,
                      mode = 'incremental',
                      getDescription=True,
                      retry = (60, 10))
        self.haltOnFailure = True

class BuildToolchain(ShellCommand):
    """This step builds the Toolchain using the riscv-tools script."""
    name = "build toolchain"
    description = r"building toolchain"
    descriptionDone = r"built toolchain"
    def __init__ (self, workdir, test_env = {}, **kwargs):
        ShellCommand.__init__ (self,
                               decodeRC = { 0 : SUCCESS,
                                            1 : SUCCESS,
                                            2 : SUCCESS },
                               **kwargs)

        self.workdir = workdir
        self.command = ['nice', '-n', '19', './build-rv32ima.sh']

        self.env = test_env
        self.haltOnFailure = True
        self.flunkOnFailure = True
        self.flunkOnWarnings = False

#
# Build Factory
#

# This is where our Build Factory is defined.  A build factory is a
# description of the build process, which is made in terms of build
# steps.  The BuildAndTestGCCFactory is the main build factory for
# GCC; it is configurable and should be more than enough to describe
# most builds.
class BuildToolsFactory(factory.BuildFactory):
    """This is the main build factory for the RISCV tools project."""
    extra_conf_flags = None
    enable_targets_all = True

    extra_make_flags = None
    extra_make_check_flags = None
    test_env = None

    def __init__(self, **kwargs):
        """Constructor of our GCC Factory."""
        super().__init__(**kwargs)

        # Directory on master which will sandbox builder
        builderdir = util.Interpolate("%(prop:builddir)s")
        installdir = util.Interpolate("%(kw:builderdir)s/install",
                                      builderdir=builderdir)

        # Directory for sources
        toolsdir = util.Interpolate("%(kw:builderdir)s/tools",
                                    builderdir=builderdir)
        gccdir = util.Interpolate("%(kw:toolsdir)s/riscv-gnu-toolchain/riscv-gcc",
                                  toolsdir=toolsdir)

        # Clone/Update repo
        self.addStep(CloneOrUpdateToolsRepo(workdir=toolsdir))
        self.addStep(CloneOrUpdateGCCRepo(workdir=gccdir))

        # Build
        self.addStep(BuildToolchain(toolsdir,
                                    test_env={'RISCV': installdir}))


# This function prevents a builder to build more than one build at the
# same time.  This is needed because we do not have a way to lock the
# svn repository containing the test results of the builder, so
# simultaneous builds can cause a mess when committing the test
# results.
# def DefaultGCCCanStartBuild (builder, buildslave, buildrequest):
#     return not builder.building

# Currently ignoring changes in gcc/doc/
files_ignored_re = re.compile ("(gcc/doc/).*")

def DefaultGCCfileIsImportant (change):
    """Implementation of fileIsImportant method, in order to decide which
changes to build on GCC."""
    only_changelog = True

    # Do not build the 'GCC Administrator' commits, that are used to
    # increment the date on some files.
    if 'GCC Administrator' in change.who:
        return False

    # Filter out commits that only modify the ChangeLog files.
    for filename in change.files:
        if 'ChangeLog' not in filename:
            only_changelog = False
            break

    if only_changelog:
        return False

    for filename in change.files:
        if not re.match (files_ignored_re, filename):
            return True

    return False

###############################
#### Configuration loading ####
###############################

# This is "the heart" of this file.  This function is responsible for
# loading the configuration present in the "lib/config.json" file,
# and initializing everything needed for BuildBot to work.  Most of
# this function was copied from WebKit's BuildBot configuration, with
# lots of tweaks.
def load_workers(c):
    with open("lib/workers.json") as f:
        config = load(f)
    with open("lib/passwords.json") as f:
        passwd = load(f)

    c['workers'] = [worker.Worker(w['name'], passwd[w['name']],
                                  max_builds=1,
                                  notify_on_missing=[str(w['admin'])],
                                  missing_timeout=300,
                                  properties={'jobs': w['jobs']})
                    for w in config['workers']]

load_workers(c)


#
# Builders
#
c['builders'] = []

c['builders'].append(
    util.BuilderConfig(name="Full-riscv32",
                       builddir="full-riscv32",
                       tags=['riscv32', 'full'],
                       workernames=['lt_jupiter-F26-x86_64'],
                       factory=BuildToolsFactory()))

#
# Schedulers
#
c['schedulers'] = []

c['schedulers'].append(
    schedulers.SingleBranchScheduler(
        name='Nightly Build',
        change_filter=util.ChangeFilter(branch=None),
        treeStableTimer=None,
        builderNames=['Full-riscv32']))

c['schedulers'].append(schedulers.ForceScheduler(
    name="force-riscv32",
    builderNames=['Full-riscv32'],

    codebases=[
        util.CodebaseParameter(
            "",
            name="Main repository",

            # will generate nothing in the form, but revision, repository,
            # and project are needed by buildbot scheduling system so we
            # need to pass a value ("")
            revision=util.FixedParameter(name="revision", default=""),
            repository=util.FixedParameter(name="repository", default=""),
            project=util.FixedParameter(name="project", default="")),
    ],

    reason=util.StringParameter(name='reason',
                                label='reason:',
                                required=True,
                                size=80),

    username=util.UserNameParameter(label='name <email@domain>:',
                                    required=True,
                                    size=80)))

c['buildbotNetUsageData'] = 'full'

# DB configuration
c['db'] = dict(db_url="postgresql+psycopg2://riscv-buildbot:eck90542@localhost/riscv-buildbot")

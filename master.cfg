# -*- python -*-
# ex: set syntax=python:

import os
import sys
import re
from json import load
from buildbot.plugins import worker, schedulers, util, secrets, reporters, steps
from buildbot.process import factory
from buildbot.steps.shell import Compile
from buildbot.steps.shell import Configure
from buildbot.steps.shell import ShellCommand
from buildbot.steps.source.svn import SVN
from buildbot.changes.svnpoller import SVNPoller
from buildbot.process.results import SUCCESS, FAILURE, EXCEPTION

# ---
# GCC BuildBot Configuration
# ---

# This is the dictionary that the buildmaster pays attention to. We
# also use a shorter alias to save typing.
c = BuildmasterConfig = {}

#### Title and URLs

c['title'] = "RISC-V"
c['titleURL'] = "https://riscv.org/software-tools/"
c['buildbotURL'] = "https://riscv-buildbot.linki.tools/"

RISCV_MAIL_FROM = 'pmatos+riscv-buildbot@linki.tools'
RISCV_MAIL_TO = 'riscv-buildbot+botmail@linki.tools'

# 'protocols' contains information about protocols which master will use for
# communicating with workers.
c['protocols'] = {'pb': {'port': 10989}}

# One build request per builder by default
c['collapseRequests'] = False

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

################
#### Secrets
################
if 'SECRETS_DIR' not in os.environ:
    print('SECRETS_DIR environment variable not defined')
    sys.exit(1)
elif not os.path.exists(os.environ['SECRETS_DIR']):
    print('SECRETS_DIR set to {} --- path does not exist')
    sys.exit(1)
c['secretsProviders'] = [secrets.SecretInAFile(dirname=os.environ['SECRETS_DIR'])]

GCC_RISCV_REPO = 'https://github.com/riscv/riscv-gcc.git'
GLIBC_RISCV_REPO = 'https://github.com/riscv/riscv-glibc.git'
QEMU_RISCV_REPO = 'https://github.com/riscv/riscv-qemu.git'
GDB_RISCV_REPO = 'https://github.com/riscv/riscv-gdb.git'
DEJAGNU_RISCV_REPO = 'https://github.com/riscv/riscv-dejagnu.git'

# Revision links to gcc svn browser
c['revlink'] = util.RevlinkMatch([r'{}.*'.format(BASE_REPO)],
                                  r'https://gcc.gnu.org/viewcvs/gcc?view=revision&revision=%s')

c['change_source'] = []
c['change_source'].append(SVNPoller(
    repourl=BASE_REPO,
    pollAtLaunch=True,
    split_file=util.svn.split_file_branches,
    pollinterval=300))

# Catch things like PR gcc/42, PR16, PR 16 or bug #11,
# and turn them into gcc bugzilla URLs.
cc_re_tuple = (r'(PR [a-z]+/|PR ?|#)(\d+)',
	           r'https://gcc.gnu.org/bugzilla/show_bug.cgi?id=\2')

c['www'] = {
    'port': 5000,
    'plugins': {
        'console_view': True,
        'waterfall_view': True,
        'grid_view': True
    }
}


################
#### Services
################
c['services'] = []

#### IRC Reporter
if 'IRC_PASSWORD' not in os.environ:
    print('Please define environment variable IRC_PASSWORD for gcc-buildbot')
    sys.exit(1)

c['services'].append(reporters.IRC("irc.oftc.net", "gcc-buildbot",
                                   useColors=True,
                                   channels=[{"channel": "#gcc"}],
                                   password=os.environ['IRC_PASSWORD'],
                                   notify_events={}))

#####################
#### Build steps ####
#####################

## This is where we define our build steps.  A build step is some
## command/action that buildbot will perform while building GCC.  See
## the documentation on each build step class to understand what it
## does.

class CloneOrUpdateGCCRepo (SVN):
    """This build step updates the repository.  For each buildslave, we have one GCC svn repository. """
    name = "update gcc trunk repo"
    description = r"fetching GCC trunk sources"
    descriptionDone = r"fetched GCC trunk sources"
    def __init__ (self, workdir, repourl):
        SVN.__init__ (self,
                      repourl = repourl,
                      workdir = workdir,
                      mode = 'incremental',
                      # Unfortunately we need this due to GCC SVN unreliability
                      # 10 retries with 60sec delay
                      retry = (60, 10))
        self.haltOnFailure = True

class ConfigureGCC (Configure):
    """This build step runs the GCC "configure" command, providing extra
flags for it if needed."""
    name = "configure gcc"
    description = r"configure GCC"
    descriptionDone = r"configured GCC"
    def __init__ (self, extra_conf_flags, workdir, cfgpath, **kwargs):
        Configure.__init__ (self, **kwargs)
        self.workdir = workdir
        self.command = [cfgpath] + extra_conf_flags

class CompileGCC (Compile):
    """This build step runs "make" to compile the GCC sources.  It
provides extra "make" flags to "make" if needed.  It also uses the
"jobs" properties to figure out how many parallel jobs we can use when
compiling GCC; this is the "-j" flag for "make".  The value of the
"jobs" property is set at the "config.json" file, for each
buildslave."""
    name = "compile gcc"
    description = r"compile GCC"
    descriptionDone = r"compiled GCC"
    def __init__ (self, workdir, make_command = 'make', extra_make_flags = [],
                  **kwargs):
        Compile.__init__ (self, **kwargs)
        self.workdir = workdir
        self.command = ['nice', '-n', '19',
                        make_command,
                        util.Interpolate("-j%(prop:jobs)s"),
                        'all'] + extra_make_flags

class TestGCC (ShellCommand):
    """This build step runs the full testsuite for GCC.  It can run in
parallel mode (see BuildAndTestGCCFactory below), and it will also
provide any extra flags for "make" if needed."""
    name = "test gcc"
    description = r"testing GCC"
    descriptionDone = r"tested GCC"
    def __init__ (self, workdir, make_command = 'make', extra_make_check_flags = [],
                  test_env = {}, **kwargs):
        ShellCommand.__init__ (self,
                               decodeRC = { 0 : SUCCESS,
                                            1 : SUCCESS,
                                            2 : SUCCESS },
                               **kwargs)

        self.workdir = workdir
        self.command = ['nice', '-n', '19',
                        make_command, '-k', 'check'] + extra_make_check_flags

        self.env = test_env
        # Needed because of dejagnu
        self.haltOnFailure = False
        self.flunkOnFailure = False
        self.flunkOnWarnings = False

def worker_needs_mpc(step):
    return step.getProperty('need_mpc') is not None

#
# Build Factory
#

# This is where our Build Factory is defined.  A build factory is a
# description of the build process, which is made in terms of build
# steps.  The BuildAndTestGCCFactory is the main build factory for
# GCC; it is configurable and should be more than enough to describe
# most builds.
class BuildAndTestGCCFactory(factory.BuildFactory):
    """This is the main build factory for the GCC project.  It was made to
be very configurable, and should be enough to describe most builds.
The parameters of the class are:

    - ConfigureClass: set this to be the class (i.e., build step) that
      will be called to configure GCC.  It needs to accept the same
      arguments as the ConfigureGCC class above.  The default is to
      use ConfigureGCC.

    - CompileClass: set this to be the class (i.e., build step) that
      will be called to compile GCC.  It needs to accept the same
      arguments as the CompileGCC class above.  The default is to use
      CompileGCC.

    - TestClass: set this to be the class (i.e., build step) that will
      be called to test GCC.  It needs to accept the same arguments as
      the TestGCC class above.  The default is to use TestGCC.

    - extra_conf_flags: extra flags to be passed to "configure".
      Should be a list (i.e., []).  The default is None.

    - enable_targets_all: set this to True to pass
      '--enable-targets=all' to configure.  The default is True.

    - extra_make_flags: extra flags to be passed to "make", when
      compiling.  Should be a list (i.e., []).  The default is None.

    - extra_make_check_flags: extra flags to be passed to "make
      check", when testing.  Should be a list (i.e., []).  The default
      is None.

    - test_env: extra environment variables to be passed to "make
      check", when testing.  Should be a dictionary (i.e., {}).  The
      default is None.

    - test_parallel: set to True if the test shall be parallelized.
      Default is False.  Beware that parallelizing tests may cause
      some failures due to limited system resources.

    - make_command: set the command that will be called when running
      'make'.  This is needed because BSD systems need to run 'gmake'
      instead of make.  Default is 'make'.

    """
    ConfigureClass = ConfigureGCC
    CompileClass = CompileGCC
    TestClass = TestGCC

    # Set this to False to skip the test
    run_testsuite = True

    extra_conf_flags = None
    enable_targets_all = True

    extra_make_flags = None
    extra_make_check_flags = None
    test_env = None

    # Set this to false to disable parallel testing (i.e., do not use
    # FORCE_PARALLEL)
    test_parallel = True

    # Set this to the make command that you want to run in the "make"
    # steps.
    make_command = 'make'

    def __init__(self, incremental=False, fast=False, **kwargs):
        """Constructor of our GCC Factory."""
        super().__init__(**kwargs)

        self.need_mpc = util.Interpolate("%(prop:need_mpc)s")

        # Builddir where the build itself will take place.
        builddir = util.Interpolate("%(prop:builddir)s/build")

        # Directory to clone gcc to
        srcdir = util.Interpolate("%(prop:builddir)s/%(src::branch:~trunk)s")

        # Path to configure
        configurepath = util.Interpolate("%(kw:builddir)s/configure-if",
                                         builddir=builddir)

        # Clone repo
        self.addStep(CloneOrUpdateGCCRepo(workdir=srcdir,
                                          repourl=util.Interpolate("{}/%(src::branch:~trunk)s".format(BASE_REPO))))

        # Check for libraries
        mpcdir = util.Interpolate("%(kw:srcdir)s/mpc-%(kw:mpcver)s",
                                  srcdir=srcdir,
                                  mpcver=self.need_mpc)
        linkfile = util.Interpolate("%(kw:srcdir)s/mpc",
                                    srcdir=srcdir)

        self.addStep(steps.ShellSequence(
            commands=[util.ShellArg(command=['rm', linkfile]),
                      util.ShellArg(command=['rm', '-R', mpcdir]),
                      util.ShellArg(command=['wget', util.Interpolate("ftp://ftp.gnu.org/gnu/mpc/mpc-%(kw:mpcver)s.tar.gz", mpcver=self.need_mpc)]),
                      util.ShellArg(command=['tar', 'xvzf', util.Interpolate("mpc-%(kw:mpcver)s.tar.gz", mpcver=self.need_mpc)]),
                      util.ShellArg(command=['rm', util.Interpolate("mpc-%(kw:mpcver)s.tar.gz", mpcver=self.need_mpc)]),
                      util.ShellArg(command=['ln', '-s', util.Interpolate("mpc-%(kw:mpcver)s", mpcver=self.need_mpc), 'mpc'])],
            workdir=srcdir,
            doStepIf=worker_needs_mpc))

        if not self.extra_conf_flags:
            self.extra_conf_flags = []

        # If this not an incremental build, remove builddir
        if not incremental:
            self.addStep(steps.RemoveDirectory(dir=builddir))

        # Configure
        self.extra_conf_flags.insert(0, util.Interpolate("%(kw:srcdir)s/configure",
                                                         srcdir=srcdir))
        self.addStep(steps.MakeDirectory(dir=builddir))
        self.addStep(steps.FileDownload(mastersrc='/home/gcc-buildbot/gcc-buildbot/scripts/configure-if',
                                        workerdest=util.Interpolate("%(kw:builddir)s/configure-if",
                                                                    builddir=builddir),
                                        mode=0o755))
        self.addStep(self.ConfigureClass(self.extra_conf_flags,
                                         workdir = builddir,
                                         cfgpath = configurepath))

        # Make
        if not self.extra_make_flags:
            self.extra_make_flags = []
        self.addStep(self.CompileClass(builddir,
                                       self.make_command,
                                       self.extra_make_flags))

        if not self.extra_make_check_flags:
            self.extra_make_check_flags = []

        if self.run_testsuite:
            if not self.test_env:
                self.test_env = {}

            if self.test_parallel:
                self.extra_make_check_flags.append (util.Interpolate("-j%(prop:jobs)s"))

            # If we are fast testing, apply patch to disable slow/uninteresting tests
            # If patching fails STOP but do not complain about failed test.
            # Instead warn administrator
            if fast:
                self.addStep(steps.FileDownload(mastersrc="/home/gcc-buildbot/gcc-buildbot/patches/0001-Disable-guality-and-prettyprinters.patch",
                                                workerdest=util.Interpolate("%(kw:srcdir)s/0001-Disable-guality-and-prettyprinters.patch",
                                                                            srcdir=srcdir)))
                self.addStep(steps.ShellCommand(command=['patch', '-p1',
                                                         '0001-Disable-guality-and-prettyprinters.patch'],
                                                workdir=srcdir,
                                                haltOnFailure=True,
                                                flunkOnFailure=True))

            self.addStep(self.TestClass(builddir,
                                        self.make_command,
                                        self.extra_make_check_flags,
                                        self.test_env,
                                        # Needed because
                                        # gcc/libstdc++-v3/testsuite/libstdc++-dg/conformance.exp
                                        # (among others)
                                        # sometimes takes more than 1200secs (default timeout)
                                        # without producing any output
                                        timeout = 3600))

            # Now we revert fast patch
            if fast:
                self.addStep(steps.ShellCommand(command=['patch', '-p1', '--reverse',
                                                        '0001-Disable-guality-and-prettyprinters.patch'],
                                               workdir=srcdir))
                self.addStep(steps.ShellCommand(command=['rm', '0001-Disable-guality-and-prettyprinters.patch'],
                                                workdir=srcdir))

            self.addStep(steps.SetPropertyFromCommand(command=util.Interpolate('%(kw:builddir)s/gcc/xgcc --version',
                                                                               builddir=builddir),
                                                      property='version'))
            self.addStep(steps.ShellCommand(command=util.Interpolate("find . -name '*.sum' -or -name '*.log' | xargs tar -cvjf test-logs_r%(prop:got_revision)s.tar.bz2"),
                                            workdir=util.Interpolate('%(kw:builddir)s/gcc/testsuite', builddir=builddir)))
            self.addStep(steps.FileUpload(workersrc=util.Interpolate('%(kw:builddir)s/gcc/testsuite/test-logs_r%(prop:got_revision)s.tar.bz2', builddir=builddir),
                                          masterdest=util.Interpolate('/home/gcc-buildbot/data/test-logs_r%(prop:got_revision)s.tar.bz2'),
                                          url=util.Interpolate('data/test-logs_r%(prop:got_revision)s.tar.bz2'),
                                          mode=0o664))

#
# Builders
#

class RunTestGCCIncremental_c64t64(BuildAndTestGCCFactory):
    """Compiling for 64-bit, testing on 64-bit."""

    def __init__(self, fast=False, **kwargs):
        self.make_command = 'make'
        self.extra_conf_flags = ['--disable-multilib']

        if fast:
            self.extra_conf_flags.append('--disable-gomp')

        super().__init__(incremental=True, fast=fast, **kwargs)


class RunTestGCCFull_c64t64(BuildAndTestGCCFactory):
    """Compiling for 64-bit, testing on 64-bit."""

    def __init__(self, **kwargs):
        self.make_command = 'make'
        self.extra_conf_flags = ['--disable-multilib']
        super().__init__(**kwargs)

# This function prevents a builder to build more than one build at the
# same time.  This is needed because we do not have a way to lock the
# svn repository containing the test results of the builder, so
# simultaneous builds can cause a mess when committing the test
# results.
# def DefaultGCCCanStartBuild (builder, buildslave, buildrequest):
#     return not builder.building

# Currently ignoring changes in gcc/doc/
files_ignored_re = re.compile ("(gcc/doc/).*")

def DefaultGCCfileIsImportant (change):
    """Implementation of fileIsImportant method, in order to decide which
changes to build on GCC."""
    only_changelog = True

    # Do not build the 'GCC Administrator' commits, that are used to
    # increment the date on some files.
    if 'GCC Administrator' in change.who:
        return False

    # Filter out commits that only modify the ChangeLog files.
    for filename in change.files:
        if 'ChangeLog' not in filename:
            only_changelog = False
            break

    if only_changelog:
        return False

    for filename in change.files:
        if not re.match (files_ignored_re, filename):
            return True

    return False

def ChangeIsDailyBump(change):
    return 'gccadmin' in change.who and 'Daily bump.' in change.comments


###############################
#### Configuration loading ####
###############################

# This is "the heart" of this file.  This function is responsible for
# loading the configuration present in the "lib/config.json" file,
# and initializing everything needed for BuildBot to work.  Most of
# this function was copied from WebKit's BuildBot configuration, with
# lots of tweaks.

def load_workers(c):
    with open("lib/workers.json") as f:
        config = load(f)
    with open("lib/passwords.json") as f:
        passwd = load(f)

    c['workers'] = [worker.Worker(w['name'], passwd[w['name']],
                                  max_builds=1,
                                  notify_on_missing=[str(w['admin'])],
                                  missing_timeout=300,
                                  properties={'jobs': w['jobs'],
                                              'need_mpc': w['need_mpc']
                                              if 'need_mpc' in w else None})
                    for w in config['workers']]

load_workers(c)


#
# Builders
#
c['builders'] = []

c['builders'].append(
    util.BuilderConfig(name="Fast-x86_64-m64",
                       builddir="increment-fast-x86_64",
                       tags=['x86_64', 'm64', 'fast', 'incremental'],
                       workernames=['lt_jupiter-F26-x86_64',
                                    'cf-gcc16-x86_64',
                                    'cf-gcc20-x86_64',
                                    'cf-gcc75-x86_64',
                                    'cf-gcc76-x86_64'],
                       factory=RunTestGCCIncremental_c64t64(fast=True)))

c['builders'].append(
    util.BuilderConfig(name="Incremental-x86_64-m64",
                       builddir="increment-x86_64",
                       tags=['x86_64', 'm64', 'incremental'],
                       workernames=['lt_jupiter-F26-x86_64',
                                    'cf-gcc16-x86_64',
                                    'cf-gcc20-x86_64',
                                    'cf-gcc75-x86_64',
                                    'cf-gcc76-x86_64'],
                       factory=RunTestGCCIncremental_c64t64()))

c['builders'].append(
    util.BuilderConfig(name="Incremental-aarch64",
                       builddir="increment-aarch64",
                       tags=['aarch64', 'incremental'],
                       workernames=['cf-gcc113-aarch64',
                                    'cf-gcc114-aarch64',
                                    'cf-gcc115-aarch64',
                                    'cf-gcc116-aarch64'],
                       factory=RunTestGCCIncremental_c64t64()))

c['builders'].append(
    util.BuilderConfig(name="Full-x86_64-m64",
                       builddir="full-x86_64",
                       tags=['x86_64', 'm64', 'full'],
                       workernames=['lt_jupiter-F26-x86_64',
                                    'cf-gcc16-x86_64',
                                    'cf-gcc20-x86_64'],
                       factory=RunTestGCCFull_c64t64()))

c['builders'].append(
    util.BuilderConfig(name="Full-aarch64",
                       builddir="full-aarch64",
                       tags=['aarch64', 'full'],
                       workernames=['cf-gcc113-aarch64',
                                    'cf-gcc114-aarch64',
                                    'cf-gcc115-aarch64',
                                    'cf-gcc116-aarch64'],
                       factory=RunTestGCCFull_c64t64()))

#
# Schedulers
#
c['schedulers'] = []

c['schedulers'].append(
    schedulers.SingleBranchScheduler(
        name='DailyBump-trunk',
        change_filter=util.ChangeFilter(branch=None),
        treeStableTimer=None,
        fileIsImportant=ChangeIsDailyBump,
        builderNames=['Full-x86_64-m64', 'Full-aarch64']))

c['schedulers'].append(
    schedulers.SingleBranchScheduler(
        name='CI-trunk',
        change_filter=util.ChangeFilter(branch=None),
        treeStableTimer=None,
        fileIsImportant=DefaultGCCfileIsImportant,
        builderNames=['Fast-x86_64-m64', 'Incremental-x86_64-m64', 'Incremental-aarch64']))

CI_BRANCHES = ['gcc-6-branch', 'gcc-7-branch']
for branch in CI_BRANCHES:
    c['schedulers'].append(
        schedulers.SingleBranchScheduler(
            name='CI_{}'.format(branch),
            change_filter=util.ChangeFilter(branch='branches/{}'.format(branch)),
            treeStableTimer=None,
            fileIsImportant=DefaultGCCfileIsImportant,
            builderNames=['Incremental-x86_64-m64', 'Incremental-aarch64']
        ))

c['schedulers'].append(schedulers.ForceScheduler(
    name="force-x64_64",
    builderNames=['Full-x86_64-m64'],

    codebases=[
        util.CodebaseParameter(
            "",
            name="Main repository",

            # will generate nothing in the form, but revision, repository,
            # and project are needed by buildbot scheduling system so we
            # need to pass a value ("")
            revision=util.FixedParameter(name="revision", default=""),
            repository=util.FixedParameter(name="repository", default=""),
            project=util.FixedParameter(name="project", default="")),
    ],

    reason=util.StringParameter(name='reason',
                                label='reason:',
                                required=True,
                                size=80),

    username=util.UserNameParameter(label='name <email@domain>:',
                                    required=True,
                                    size=80)))

c['schedulers'].append(schedulers.ForceScheduler(
    name="force-aarch64",
    builderNames=['Full-aarch64'],

    codebases=[
        util.CodebaseParameter(
            "",
            name="Main repository",

            # will generate nothing in the form, but revision, repository,
            # and project are needed by buildbot scheduling system so we
            # need to pass a value ("")
            revision=util.FixedParameter(name="revision", default=""),
            repository=util.FixedParameter(name="repository", default=""),
            project=util.FixedParameter(name="project", default="")),
    ],

    reason=util.StringParameter(name='reason',
                                label='reason:',
                                required=True,
                                size=80),

    username=util.UserNameParameter(label='name <email@domain>:',
                                    required=True,
                                    size=80)))

c['buildbotNetUsageData'] = 'full'

# DB configuration
c['db'] = dict(db_url="postgresql+psycopg2://gcc-buildbot:eck90542@localhost/gcc-buildbot")
